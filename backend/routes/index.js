// routes/index.js

var router = require('express').Router();

const stripe = require('stripe')(process.env.STRIPE_SECRET);

// Save payment (w/ customer registration): https://stripe.com/docs/payments/save-during-payment#web-collect-card-details
// Accept a payment (no customer registration): https://stripe.com/docs/payments/accept-a-payment#web
// Demo source code for payments: https://github.com/stripe/stripe-payments-demo/blob/master/public/javascripts/payments.js

/**

	STEPS (w/ cust reg):
	1. create a Customer object for payment to be associated with if card or other payment method is to be saved
	2. create PaymentIntent server-side with amount, currency, customer.id (amount should be retrieved from back-end like from an item-cost map, not submitted from client)
	3. send client secret from PaymentIntent to client
	4. collect card info on client side using Stripe Elements fields
	5. confirm payment on client side using client secret generated by PaymentIntent response from server

	Testing: Test integration using test card numbers

**/

router.post('/register', async(req, res) => {
	/* Create Customer object and store in database */

	// TASK: Check customer 
	// If customer exists, return success false
	// If doesn't exist, create Customer obj and store in db, then return success true

	// const customer = await stripe.customers.retrieve('<customer_id>');
	// console.log("Customer obj: ", customer);

	// Store customer's full address in variables
	// const { address, city, state, zip } = req.body;
	// const billingAddress = address + ' ,' + city + ' ,' + state + zip	// regular (billing) address
	// const shippingAddress = address + ' ,' + city + ' ,' + state + zip	// assuming shipping address is same as regular (billing) address

	// Create Stripe's Customer object
	const customer = await stripe.customers.create({
		// id: null	// auto-generated?
		name: '',
		email: '',
		address: '',	// billingAddress
		shipping: '',	// shippingAddress
	});

	// TASK: store customer data in db using same id (stripe.customers.retrieve() ?)

})

/*
const itemCostMap = {
	itemID: {
		itemName,
		price,
		total_stock,
		customer_quantity_limit
	}
}
*/

var itemCostMap = {
	"1a": {
		name: "Organic Cat Tuna",
		// description: "Your pet deserves health and good taste.",
		// image_path: "",
		price: 5, 
		total_stock: 20,
		customer_quantity_limit: 2
	},
	"2b": {
		name: "Pet Bow Tie GPS",
		// description: "Know where Buttons is at all times.",
		// image_path: "",
		price: 89, 
		total_stock: 6,
		customer_quantity_limit: 2
	},
	"3c": {
		name: "Smart Kitty Feeder",
		// description: "Forgot to feed Rickles? A robot has you covered.",
		// image_path: "",
		price: 225, 
		total_stock: 2,
		customer_quantity_limit: 1
	},
	"10": {
		name: "Green dress",
		// description: "",
		// image_path: "dress-green-leaves-plant.jpg",
		price: 200,
		total_stock: 20, 	
		customer_quantity_limit: 1
	},
	"11": {
		name: "Summer Cotton Tank",
		// description: "Perfect for a sunny day",
		// image_path: "dress-woman-in-red-tank-top-holding-on-the-railings.jpg",
		price: 120,
		total_stock: 20, 	
		customer_quantity_limit: 1
	},
	"12": {
		name: "Hollywood Glam Silver Sequin Dress",
		// description: "Be the envy of the town",
		// image_path: "dress-woman-in-silver-sequin-dress.jpg",
		price: 375, 
		total_stock: 20, 	
		customer_quantity_limit: 1
	},
	"13": {
		name: "Short-sleeved spring dress",
		// description: "White short-sleeved dress",
		// image_path: "dress-woman-in-white-short-sleeved-dress-holding-brown-leather.jpg",
		price: 65,
		total_stock: 20, 	
		customer_quantity_limit: 1
	},
	"14": {
		name: "Yellow dress",
		// description: "Something that won't look dull",
		// image_path: "dress-woman-standing-in-front-of-door.jpg",
		price: 285, 
		total_stock: 20, 	
		customer_quantity_limit: 1
	},
	"15": {
		name: "Laced Low-Cut Dress",
		// description: "Exude elegance and class with this one",
		// image_path: "dress-woman-standing-sideways.jpg",
		price: 340, 
		total_stock: 20, 	
		customer_quantity_limit: 1
	},
	"16": {
		name: "Pink Cotton Dress",
		// description: "Bold and comfortable",
		// image_path: "dress-woman-wearing-a-dress.jpg",
		price: 90,
		total_stock: 20, 	
		customer_quantity_limit: 1
	},
	"17": {
		name: "Black and Gray Plaid Dress",
		// description: "Another one",
		// image_path: "dress-women-s-black-and-gray-plaid-cold-shoulder-dress.jpg",
		price: 125,
		total_stock: 20, 	
		customer_quantity_limit: 1
	}
}

var calcTotalCost = (itemsArray) => {
	// decide costs server-side to prevent manipulation of prices on front-end

	// console.log("itemCostMap:", itemCostMap);

	var totalCost = 0;
	for (var i=0; i<itemsArray.length; i++) {
		const itemObj = itemsArray[i];
		const itemID = itemObj.id;
		const selectedQuantity = itemObj.quantity;
		// console.log("itemObj:", itemObj);
		// console.log("itemID:", itemID);
		// console.log("selectedQuantity:", selectedQuantity);

		// get cost from itemCostMap
		console.log("item obj from itemCostMap:", itemCostMap[itemID])
		if (selectedQuantity <= itemCostMap[itemID].total_stock) {
			// TASK subtract selectedQuantity from total stock of item in db
			// itemCostMap[itemID].total_stock - selectedQuantity	// itemCostMap would be replaced by db object

			// add to total cost
			const itemCost = itemCostMap[itemID].price;
			totalCost += (itemCost * selectedQuantity);
			console.log("itemCost:", itemCost);
			console.log("added totalCost:", totalCost);
		} else {
			console.log(`Not enough of ${itemObj.name} in stock. Remaining: ${itemCostMap[itemID].total_stock}`);
		}
	}
	// console.log("final total cost:", totalCost);
	// console.log("final total cost type:", typeof totalCost);

	return parseInt(totalCost);
}

router.post('/create-payment-intent', async(req, res) => {
	/* Create PaymentIntent object */

	// TASK: Get customer object if logged in (customer id should be sent in request body to verify)

	// Get list of items selected by customer
	const { name, email, shoppingCartItemsArray } = req.body;

	// Create PaymentIntent 
	const totalCost = calcTotalCost(shoppingCartItemsArray);
	// console.log("payment intent cost:", totalCost);
	
	const paymentIntent = await stripe.paymentIntents.create({
		amount: totalCost * 100,	// convert to cents
		currency: 'usd',
		payment_method_types: ['card']
		//	customer: customer.id,	// TASK: if customer is logged in
		// 	receipt_email: email
	});
	console.log("paymentIntent response obj:", paymentIntent);

	// If paymentIntent is successfully created
	// Send publishable key and PaymentIntent's client secret for client-side payment confirmation
	res.send({
		success: true,
		totalCost: totalCost,
		publishableKey: process.env.STRIPE_PUBLISHABLE_KEY,
		clientSecret: paymentIntent.client_secret
	});

})



// Send request to Stripe API
// Always decide how much to charge on the server side, a trusted environment, 
// as opposed to the client. This prevents malicious customers from being able to choose their own prices.
// (async() => {
// 	const paymentIntent = await stripe.paymentIntents.create({
// 		amount: 1000,
// 		currency: 'usd',
// 		payment_method_types: ['card'],
// 		receipt_email: 'bob_johnson@email.com'
// 	});

// 	console.log("paymentIntent response obj:", paymentIntent);

// })();


module.exports = router;